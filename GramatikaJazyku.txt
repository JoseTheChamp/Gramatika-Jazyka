Program = {statement} ;

statement = ( ( definition | assign | call | return ) ";") | (if | while | fun) ;

return = "return" ( expression | ident | call) ;
fun = "fun" ident "(" [ ident ":" dataType { "," ident ":" dataType } ] ")" [":" dataType] "{" {statement} "}" ;
definition = ("var" | "val") ident [":" dataType] ["=" values] ;
call = ident "(" [ values { "," values } ] ")" ;
while = "while" "(" condition ")" "{" {statement} "}" ;
if = "if" "(" condition ")" (assign | call | return) ";" | "if" "(" condition ")" "{" {statement} "}" ["else" "{" {statement} "}"];
assign = ident "=" values ;

values = ( expression | call | strLit ) ;

condition = ["!"] expression condSym ["!"] expression | ["!"] expression ;
condSym = ("=="|"<="|"<"|">="|">"|"||"|"&&"|"!=") ;


expression = [ "+"|"-"] term { ("+"|"-") term} ;
term = factor {("*"|"/") factor} ;
factor = floatLit | number |  ident | "(" expression ")" ;

dataType = "String" | "Int" | "Float" ;

strLit = /"[^"]*"/;
number = /(0|[1-9][0-9]*)/ ;
floatLit = number "." number;
ident = /[a-zA-Z_][a-zA-Z0-9_]*/ ;